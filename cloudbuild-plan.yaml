# cloudbuild-plan.yaml
steps:
# Get cluster credentials
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get-credentials'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - '${_CLUSTER_NAME}'
  - '--region'
  - '${_REGION}'
  - '--project'
  - '${PROJECT_ID}'

# Terraform Init
- name: '${_TERRAFORM_VERSION}'
  id: 'tf-init'
  args: ['init']
  dir: 'terraform'

# Import existing deployment
- name: '${_TERRAFORM_VERSION}'
  id: 'tf-import'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    terraform init
    export TF_VAR_app_image=$(grep 'app_image' ${_TFVARS_FILE} | cut -d'=' -f2- | tr -d ' "')
    terraform import kubernetes_deployment.flask_app ${_K8S_NAMESPACE}/flask-app || true
  dir: 'terraform'

# Terraform Plan
- name: '${_TERRAFORM_VERSION}'
  id: 'tf-plan'
  args:
    - 'plan'
    - '-var-file=${_TFVARS_FILE}'
    - '-out=/workspace/terraform/tfplan'
    - '-input=false'
  dir: 'terraform'
  waitFor: ['tf-import']

# Trigger apply build
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'trigger-apply'
  args:
    - 'builds'
    - 'triggers'
    - 'run'
    - '${_APPLY_TRIGGER_ID}'
    - '--branch=${BRANCH_NAME}'
    - '--project=${PROJECT_ID}'
    - '--region=${_REGION}'
  waitFor: ['tf-plan']

options:
  logging: CLOUD_LOGGING_ONLY
  env:
    - 'TF_VAR_project_id=${PROJECT_ID}'
    - 'TF_VAR_region=${_REGION}'
    - 'TF_IN_AUTOMATION=true'
    - 'TF_INPUT=0'

timeout: '1800s'
