# cloudbuild-plan.yaml
steps:
# Debug step
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'debug'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    echo "Workspace contents:"
    ls -la /workspace
    echo "Terraform directory contents:"
    ls -la /workspace/terraform

# Get cluster credentials
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get-credentials'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - 'autopilot-cluster-1-test'
  - '--region'
  - 'asia-south1'
  - '--project'
  - 'vishakha-403211'

# Terraform Init
- name: 'hashicorp/terraform:1.4.7'
  id: 'tf-init'
  args: ['init']
  dir: 'terraform'

# Import existing deployment into Terraform state
- name: 'hashicorp/terraform:1.4.7'
  id: 'tf-import'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    terraform init
    export TF_VAR_app_image=$(grep 'app_image' main.tfvars | cut -d'=' -f2- | tr -d ' "')
    terraform import kubernetes_deployment.flask_app default/flask-app || true
  dir: 'terraform'

# Terraform Plan
- name: 'hashicorp/terraform:1.4.7'
  id: 'tf-plan'
  args:
    - 'plan'
    - '-var-file=main.tfvars'
    - '-out=tfplan'
    - '-input=false'
  dir: 'terraform'
  waitFor: ['tf-import']

# Save plan file to GCS
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'terraform/tfplan', 'gs://${_BUCKET_NAME}/tfplan']
  waitFor: ['tf-plan']

options:
  logging: CLOUD_LOGGING_ONLY
  env:
    - 'TF_VAR_project_id=vishakha-403211'
    - 'TF_VAR_region=asia-south1'
    - 'TF_IN_AUTOMATION=true'
    - 'TF_INPUT=0'

substitutions:
  _BUCKET_NAME: 'vishakha-403211-tfstate'  # Use your state bucket

timeout: '1800s'
